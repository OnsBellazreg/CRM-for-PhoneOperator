package tn.esprit.CRM.gui;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import tn.esprit.CRM.persistence.Conge;
import tn.esprit.CRM.persistence.Staff;
import tn.esprit.CRM.persistence.User;
import tn.esprit.CRM.services.StaffServiceRemote;

import java.io.IOException;
import java.net.URL;
import java.util.Calendar;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.ResourceBundle;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class AfficherStaffController implements Initializable{
	@FXML
	private TableView<User> user;
	@FXML
	private TableView<Staff> table;
	@FXML
	private TableColumn<Staff,Integer> dispo;
	@FXML
	private TableColumn<Staff,Integer> nbrj;
	@FXML
	private TableColumn<Staff,Integer> years;
	@FXML
	private TableColumn<Staff,Float> salary;
	@FXML
	private TableColumn<Staff,Integer> increase;
	@FXML
	private TextField disponibilite;
	@FXML
	private TextField nombre;
	@FXML
	private TextField year;
	@FXML
	private TextField salaire;
	@FXML
	private TextField incr;
	@FXML
	private Button submit;
	@FXML
	private Button update;
	@FXML
	private Button delete;
	@FXML
	private Button retour;
	@FXML
	private TableColumn<User,String> firstname;
	@FXML
	private TableColumn<User,String> lastname;
	@FXML
	private TableColumn<User,Integer> cin;
	// Event Listener on Button[#submit].onAction
	@FXML
	public void submit(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#update].onAction
	@FXML
	public void update(ActionEvent event) throws NamingException {
		Integer selected = table.getSelectionModel().getSelectedIndex();
		InitialContext ctx;
		ctx = new InitialContext();
		StaffServiceRemote proxy;
		proxy = (StaffServiceRemote) ctx.lookup("CRM-ear/CRM-ejb/StaffService!tn.esprit.CRM.services.StaffServiceRemote");
      if (table.getSelectionModel().isSelected(selected)) {

			Staff cc = table.getItems().get(selected);
			cc.setNbjrscp(Integer.parseInt(nbrj.getText()));
			
			cc.setDisponibilite(Integer.parseInt(disponibilite.getText()));
			cc.setIncrease(Integer.parseInt(incr.getText()));
			cc.setYearswork(Integer.parseInt(year.getText()));
			cc.setSalary_staff(Float.parseFloat(salaire.getText()));
			
			proxy.ModifierEmployee(cc);
			
			

		}
      ObservableList<Staff> data = FXCollections.observableArrayList(proxy.FindAllStaff());
		 table.setItems(data);
	}
	// Event Listener on Button[#delete].onAction
	@FXML
	public void delete(ActionEvent event) throws NamingException {
		 Context context;
	    	context = new InitialContext();

	    	String jndiName ="CRM-ear/CRM-ejb/StaffService!tn.esprit.CRM.services.StaffServiceRemote";
	    	StaffServiceRemote proxy2= (StaffServiceRemote) context
					.lookup(jndiName) ;
	    	
	    	Integer selected = table.getSelectionModel().getSelectedIndex();
	    	Staff cc =(Staff) table.getSelectionModel().getSelectedItem();
	    	//c.getStatus_co()
	    	   if (table.getSelectionModel().isSelected(selected)) 
	    		 
	    	if (((table.getSelectionModel().isSelected(selected))) ) {   		
	    		proxy2.SupprimerEmployee(table.getItems().get(selected));
				table.getItems().remove(table.getItems().get(selected));
					
				
			} else {
				System.out.println("not done");
			}
	    	
	    	   ObservableList<Staff> data = FXCollections.observableArrayList(proxy2.FindAllStaff());
				List<Staff> li= proxy2.FindAllStaff();
			for(Staff c:li){
				System.out.println(c);
			}

			table.setItems(data);
			dispo.setCellValueFactory(new PropertyValueFactory<Staff,Integer>("disponibilite"));
			nbrj.setCellValueFactory(new PropertyValueFactory<Staff,Integer>("nbjrscp"));
			years.setCellValueFactory(new PropertyValueFactory<Staff,Integer>("yearswork"));
			salary.setCellValueFactory(new PropertyValueFactory<Staff,Float>("salary_staff"));
			increase.setCellValueFactory(new PropertyValueFactory<Staff,Integer>("increase"));
		
		
			
			
		

	}
	// Event Listener on Button[#retour].onAction
	@FXML
	public void retour(ActionEvent event) throws IOException {
		FXMLLoader loaders= new FXMLLoader(getClass().getResource("./test.fxml"));
	       Parent root;
	  	 	root=loaders.load();
	  	 	retour.getScene().setRoot(root);
	}
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		 InitialContext ctx;
			try {
				ctx = new InitialContext();
				StaffServiceRemote proxy;

				proxy = (StaffServiceRemote) ctx.lookup("CRM-ear/CRM-ejb/StaffService!tn.esprit.CRM.services.StaffServiceRemote");
				ObservableList<Staff> data = FXCollections.observableArrayList(proxy.FindAllStaff());
				ObservableList<User> data3 = FXCollections.observableArrayList(proxy.FindAllUsers());
					List<Staff> li= proxy.FindAllStaff();
					
					ObservableList<Conge> data2 = FXCollections.observableArrayList(proxy.FindAllDemandeConge());
					List<Conge> li2= proxy.FindAllDemandeConge();
					
				for(Staff c:li){
					Date d1=new Date();
					Date d2=c.getAccount_Date();
					DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");  
				int x=((d1.getYear()-d2.getYear())*12)+(d1.getMonth()-d2.getMonth())+1;
				int nbr=x/12;
				c.setYearswork(nbr);				
				proxy.UpdateStaff(c);
				for(Conge cc:li2){
					Date dc=cc.getDate_co();
					int nbrd=cc.getNbjrs_co();
					long lol=dc.getTime()+nbrd*24*60*60*1000;
					Date newdate=new Date(lol);
					if(((dc.equals(d1)) || (d1.compareTo(newdate)<=0)) && cc.getStatus_co().equals("Approved") ){
						c.setDisponibilite(0);	
						proxy.UpdateStaff(c);
					}
					else {
						c.setDisponibilite(1);
						proxy.UpdateStaff(c);
					}
				}
				

				}
				user.setItems(data3);
				table.setItems(data);
				dispo.setCellValueFactory(new PropertyValueFactory<Staff,Integer>("disponibilite"));
				nbrj.setCellValueFactory(new PropertyValueFactory<Staff,Integer>("nbjrscp"));
				years.setCellValueFactory(new PropertyValueFactory<Staff,Integer>("yearswork"));
				salary.setCellValueFactory(new PropertyValueFactory<Staff,Float>("salary_staff"));
				increase.setCellValueFactory(new PropertyValueFactory<Staff,Integer>("increase"));
				firstname.setCellValueFactory(new PropertyValueFactory<User,String>("first_Name"));
				cin.setCellValueFactory(new PropertyValueFactory<User,Integer>("CIN"));
				lastname.setCellValueFactory(new PropertyValueFactory<User,String>("last_Name"));
				
			//	nbrj.setCellValueFactory(new PropertyValueFactory<User,String>("first_Name"));
			
				
				
			} catch (NamingException e1) {
				// TODO Auto-generated catch blocks
				//e1.printStackTrace();
			} 
		
	}
}
